import {
  __commonJS,
  __require
} from "./chunk-5FUTL2UF.js";

// browser-external:worker_threads
var require_worker_threads = __commonJS({
  "browser-external:worker_threads"(exports, module2) {
    module2.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "worker_threads" has been externalized for browser compatibility. Cannot access "worker_threads.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/wavesurfer.js/dist/plugins/spectrogram.esm.js
function e(e2, t2, s2, i2) {
  return new (s2 || (s2 = Promise))((function(r2, n2) {
    function a2(e3) {
      try {
        o2(i2.next(e3));
      } catch (e4) {
        n2(e4);
      }
    }
    function l2(e3) {
      try {
        o2(i2.throw(e3));
      } catch (e4) {
        n2(e4);
      }
    }
    function o2(e3) {
      var t3;
      e3.done ? r2(e3.value) : (t3 = e3.value, t3 instanceof s2 ? t3 : new s2((function(e4) {
        e4(t3);
      }))).then(a2, l2);
    }
    o2((i2 = i2.apply(e2, t2 || [])).next());
  }));
}
var t = 1e3 * Math.log(10) / 107.939;
function s(e2) {
  return 2595 * Math.log10(1 + e2 / 700);
}
function i(e2) {
  return 700 * (Math.pow(10, e2 / 2595) - 1);
}
function r(e2) {
  return Math.log10(Math.max(1, e2));
}
function n(e2) {
  return Math.pow(10, e2);
}
function a(e2) {
  let t2 = 26.81 * e2 / (1960 + e2) - 0.53;
  return t2 < 2 && (t2 += 0.15 * (2 - t2)), t2 > 20.1 && (t2 += 0.22 * (t2 - 20.1)), t2;
}
function l(e2) {
  return e2 < 2 && (e2 = (e2 - 0.3) / 0.85), e2 > 20.1 && (e2 = (e2 + 4.422) / 1.22), (e2 + 0.53) / (26.28 - e2) * 1960;
}
function o(e2) {
  return t * Math.log10(1 + 437e-5 * e2);
}
function h(e2) {
  return (Math.pow(10, e2 / t) - 1) / 437e-5;
}
function c(e2, t2) {
  switch (t2) {
    case "mel":
      return s(e2);
    case "logarithmic":
      return r(e2);
    case "bark":
      return a(e2);
    case "erb":
      return o(e2);
    default:
      return e2;
  }
}
function d(e2, t2, s2, i2, r2) {
  const n2 = i2(0), a2 = i2(s2 / 2), l2 = Array.from({ length: e2 }, (() => Array(t2 / 2 + 1).fill(0))), o2 = s2 / t2;
  for (let t3 = 0; t3 < e2; t3++) {
    const s3 = r2(n2 + t3 / e2 * (a2 - n2)), i3 = Math.floor(s3 / o2), h2 = i3 * o2, c2 = (s3 - h2) / ((i3 + 1) * o2 - h2);
    l2[t3][i3] = 1 - c2, l2[t3][i3 + 1] = c2;
  }
  return l2;
}
function u(e2, t2) {
  const s2 = t2.length, i2 = Float32Array.from({ length: s2 }, (() => 0));
  for (let r2 = 0; r2 < s2; r2++) for (let s3 = 0; s3 < e2.length; s3++) i2[r2] += e2[s3] * t2[r2][s3];
  return i2;
}
var p = { gray: () => {
  const e2 = [];
  for (let t2 = 0; t2 < 256; t2++) {
    const s2 = (255 - t2) / 256;
    e2.push([s2, s2, s2, 1]);
  }
  return e2;
}, igray: () => {
  const e2 = [];
  for (let t2 = 0; t2 < 256; t2++) {
    const s2 = t2 / 256;
    e2.push([s2, s2, s2, 1]);
  }
  return e2;
}, roseus: () => [[4528e-6, 4341e-6, 4307e-6, 1], [5625e-6, 6156e-6, 601e-5, 1], [6628e-6, 8293e-6, 8161e-6, 1], [7551e-6, 0.010738, 0.01079, 1], [8382e-6, 0.013482, 0.013941, 1], [9111e-6, 0.01652, 0.017662, 1], [9727e-6, 0.019846, 0.022009, 1], [0.010223, 0.023452, 0.027035, 1], [0.010593, 0.027331, 0.032799, 1], [0.010833, 0.031475, 0.039361, 1], [0.010941, 0.035875, 0.046415, 1], [0.010918, 0.04052, 0.053597, 1], [0.010768, 0.045158, 0.060914, 1], [0.010492, 0.049708, 0.068367, 1], [0.010098, 0.054171, 0.075954, 1], [9594e-6, 0.058549, 0.083672, 1], [8989e-6, 0.06284, 0.091521, 1], [8297e-6, 0.067046, 0.099499, 1], [753e-5, 0.071165, 0.107603, 1], [6704e-6, 0.075196, 0.11583, 1], [5838e-6, 0.07914, 0.124178, 1], [4949e-6, 0.082994, 0.132643, 1], [4062e-6, 0.086758, 0.141223, 1], [3198e-6, 0.09043, 0.149913, 1], [2382e-6, 0.09401, 0.158711, 1], [1643e-6, 0.097494, 0.167612, 1], [1009e-6, 0.100883, 0.176612, 1], [514e-6, 0.104174, 0.185704, 1], [187e-6, 0.107366, 0.194886, 1], [66e-6, 0.110457, 0.204151, 1], [186e-6, 0.113445, 0.213496, 1], [587e-6, 0.116329, 0.222914, 1], [1309e-6, 0.119106, 0.232397, 1], [2394e-6, 0.121776, 0.241942, 1], [3886e-6, 0.124336, 0.251542, 1], [5831e-6, 0.126784, 0.261189, 1], [8276e-6, 0.12912, 0.270876, 1], [0.011268, 0.131342, 0.280598, 1], [0.014859, 0.133447, 0.290345, 1], [0.0191, 0.135435, 0.300111, 1], [0.024043, 0.137305, 0.309888, 1], [0.029742, 0.139054, 0.319669, 1], [0.036252, 0.140683, 0.329441, 1], [0.043507, 0.142189, 0.339203, 1], [0.050922, 0.143571, 0.348942, 1], [0.058432, 0.144831, 0.358649, 1], [0.066041, 0.145965, 0.368319, 1], [0.073744, 0.146974, 0.377938, 1], [0.081541, 0.147858, 0.387501, 1], [0.089431, 0.148616, 0.396998, 1], [0.097411, 0.149248, 0.406419, 1], [0.105479, 0.149754, 0.415755, 1], [0.113634, 0.150134, 0.424998, 1], [0.121873, 0.150389, 0.434139, 1], [0.130192, 0.150521, 0.443167, 1], [0.138591, 0.150528, 0.452075, 1], [0.147065, 0.150413, 0.460852, 1], [0.155614, 0.150175, 0.469493, 1], [0.164232, 0.149818, 0.477985, 1], [0.172917, 0.149343, 0.486322, 1], [0.181666, 0.148751, 0.494494, 1], [0.190476, 0.148046, 0.502493, 1], [0.199344, 0.147229, 0.510313, 1], [0.208267, 0.146302, 0.517944, 1], [0.217242, 0.145267, 0.52538, 1], [0.226264, 0.144131, 0.532613, 1], [0.235331, 0.142894, 0.539635, 1], [0.24444, 0.141559, 0.546442, 1], [0.253587, 0.140131, 0.553026, 1], [0.262769, 0.138615, 0.559381, 1], [0.271981, 0.137016, 0.5655, 1], [0.281222, 0.135335, 0.571381, 1], [0.290487, 0.133581, 0.577017, 1], [0.299774, 0.131757, 0.582404, 1], [0.30908, 0.129867, 0.587538, 1], [0.318399, 0.12792, 0.592415, 1], [0.32773, 0.125921, 0.597032, 1], [0.337069, 0.123877, 0.601385, 1], [0.346413, 0.121793, 0.605474, 1], [0.355758, 0.119678, 0.609295, 1], [0.365102, 0.11754, 0.612846, 1], [0.374443, 0.115386, 0.616127, 1], [0.383774, 0.113226, 0.619138, 1], [0.393096, 0.111066, 0.621876, 1], [0.402404, 0.108918, 0.624343, 1], [0.411694, 0.106794, 0.62654, 1], [0.420967, 0.104698, 0.628466, 1], [0.430217, 0.102645, 0.630123, 1], [0.439442, 0.100647, 0.631513, 1], [0.448637, 0.098717, 0.632638, 1], [0.457805, 0.096861, 0.633499, 1], [0.46694, 0.095095, 0.6341, 1], [0.47604, 0.093433, 0.634443, 1], [0.485102, 0.091885, 0.634532, 1], [0.494125, 0.090466, 0.63437, 1], [0.503104, 0.08919, 0.633962, 1], [0.512041, 0.088067, 0.633311, 1], [0.520931, 0.087108, 0.63242, 1], [0.529773, 0.086329, 0.631297, 1], [0.538564, 0.085738, 0.629944, 1], [0.547302, 0.085346, 0.628367, 1], [0.555986, 0.085162, 0.626572, 1], [0.564615, 0.08519, 0.624563, 1], [0.573187, 0.085439, 0.622345, 1], [0.581698, 0.085913, 0.619926, 1], [0.590149, 0.086615, 0.617311, 1], [0.598538, 0.087543, 0.614503, 1], [0.606862, 0.0887, 0.611511, 1], [0.61512, 0.090084, 0.608343, 1], [0.623312, 0.09169, 0.605001, 1], [0.631438, 0.093511, 0.601489, 1], [0.639492, 0.095546, 0.597821, 1], [0.647476, 0.097787, 0.593999, 1], [0.655389, 0.100226, 0.590028, 1], [0.66323, 0.102856, 0.585914, 1], [0.670995, 0.105669, 0.581667, 1], [0.678686, 0.108658, 0.577291, 1], [0.686302, 0.111813, 0.57279, 1], [0.69384, 0.115129, 0.568175, 1], [0.7013, 0.118597, 0.563449, 1], [0.708682, 0.122209, 0.558616, 1], [0.715984, 0.125959, 0.553687, 1], [0.723206, 0.12984, 0.548666, 1], [0.730346, 0.133846, 0.543558, 1], [0.737406, 0.13797, 0.538366, 1], [0.744382, 0.142209, 0.533101, 1], [0.751274, 0.146556, 0.527767, 1], [0.758082, 0.151008, 0.522369, 1], [0.764805, 0.155559, 0.516912, 1], [0.771443, 0.160206, 0.511402, 1], [0.777995, 0.164946, 0.505845, 1], [0.784459, 0.169774, 0.500246, 1], [0.790836, 0.174689, 0.494607, 1], [0.797125, 0.179688, 0.488935, 1], [0.803325, 0.184767, 0.483238, 1], [0.809435, 0.189925, 0.477518, 1], [0.815455, 0.19516, 0.471781, 1], [0.821384, 0.200471, 0.466028, 1], [0.827222, 0.205854, 0.460267, 1], [0.832968, 0.211308, 0.454505, 1], [0.838621, 0.216834, 0.448738, 1], [0.844181, 0.222428, 0.442979, 1], [0.849647, 0.22809, 0.43723, 1], [0.855019, 0.233819, 0.431491, 1], [0.860295, 0.239613, 0.425771, 1], [0.865475, 0.245471, 0.420074, 1], [0.870558, 0.251393, 0.414403, 1], [0.875545, 0.25738, 0.408759, 1], [0.880433, 0.263427, 0.403152, 1], [0.885223, 0.269535, 0.397585, 1], [0.889913, 0.275705, 0.392058, 1], [0.894503, 0.281934, 0.386578, 1], [0.898993, 0.288222, 0.381152, 1], [0.903381, 0.294569, 0.375781, 1], [0.907667, 0.300974, 0.370469, 1], [0.911849, 0.307435, 0.365223, 1], [0.915928, 0.313953, 0.360048, 1], [0.919902, 0.320527, 0.354948, 1], [0.923771, 0.327155, 0.349928, 1], [0.927533, 0.333838, 0.344994, 1], [0.931188, 0.340576, 0.340149, 1], [0.934736, 0.347366, 0.335403, 1], [0.938175, 0.354207, 0.330762, 1], [0.941504, 0.361101, 0.326229, 1], [0.944723, 0.368045, 0.321814, 1], [0.947831, 0.375039, 0.317523, 1], [0.950826, 0.382083, 0.313364, 1], [0.953709, 0.389175, 0.309345, 1], [0.956478, 0.396314, 0.305477, 1], [0.959133, 0.403499, 0.301766, 1], [0.961671, 0.410731, 0.298221, 1], [0.964093, 0.418008, 0.294853, 1], [0.966399, 0.425327, 0.291676, 1], [0.968586, 0.43269, 0.288696, 1], [0.970654, 0.440095, 0.285926, 1], [0.972603, 0.44754, 0.28338, 1], [0.974431, 0.455025, 0.281067, 1], [0.976139, 0.462547, 0.279003, 1], [0.977725, 0.470107, 0.277198, 1], [0.979188, 0.477703, 0.275666, 1], [0.980529, 0.485332, 0.274422, 1], [0.981747, 0.492995, 0.273476, 1], [0.98284, 0.50069, 0.272842, 1], [0.983808, 0.508415, 0.272532, 1], [0.984653, 0.516168, 0.27256, 1], [0.985373, 0.523948, 0.272937, 1], [0.985966, 0.531754, 0.273673, 1], [0.986436, 0.539582, 0.274779, 1], [0.98678, 0.547434, 0.276264, 1], [0.986998, 0.555305, 0.278135, 1], [0.987091, 0.563195, 0.280401, 1], [0.987061, 0.5711, 0.283066, 1], [0.986907, 0.579019, 0.286137, 1], [0.986629, 0.58695, 0.289615, 1], [0.986229, 0.594891, 0.293503, 1], [0.985709, 0.602839, 0.297802, 1], [0.985069, 0.610792, 0.302512, 1], [0.98431, 0.618748, 0.307632, 1], [0.983435, 0.626704, 0.313159, 1], [0.982445, 0.634657, 0.319089, 1], [0.981341, 0.642606, 0.32542, 1], [0.98013, 0.650546, 0.332144, 1], [0.978812, 0.658475, 0.339257, 1], [0.977392, 0.666391, 0.346753, 1], [0.97587, 0.67429, 0.354625, 1], [0.974252, 0.68217, 0.362865, 1], [0.972545, 0.690026, 0.371466, 1], [0.97075, 0.697856, 0.380419, 1], [0.968873, 0.705658, 0.389718, 1], [0.966921, 0.713426, 0.399353, 1], [0.964901, 0.721157, 0.409313, 1], [0.962815, 0.728851, 0.419594, 1], [0.960677, 0.7365, 0.430181, 1], [0.95849, 0.744103, 0.44107, 1], [0.956263, 0.751656, 0.452248, 1], [0.954009, 0.759153, 0.463702, 1], [0.951732, 0.766595, 0.475429, 1], [0.949445, 0.773974, 0.487414, 1], [0.947158, 0.781289, 0.499647, 1], [0.944885, 0.788535, 0.512116, 1], [0.942634, 0.795709, 0.524811, 1], [0.940423, 0.802807, 0.537717, 1], [0.938261, 0.809825, 0.550825, 1], [0.936163, 0.81676, 0.564121, 1], [0.934146, 0.823608, 0.577591, 1], [0.932224, 0.830366, 0.59122, 1], [0.930412, 0.837031, 0.604997, 1], [0.928727, 0.843599, 0.618904, 1], [0.927187, 0.850066, 0.632926, 1], [0.925809, 0.856432, 0.647047, 1], [0.92461, 0.862691, 0.661249, 1], [0.923607, 0.868843, 0.675517, 1], [0.92282, 0.874884, 0.689832, 1], [0.922265, 0.880812, 0.704174, 1], [0.921962, 0.886626, 0.718523, 1], [0.92193, 0.892323, 0.732859, 1], [0.922183, 0.897903, 0.747163, 1], [0.922741, 0.903364, 0.76141, 1], [0.92362, 0.908706, 0.77558, 1], [0.924837, 0.913928, 0.789648, 1], [0.926405, 0.919031, 0.80359, 1], [0.92834, 0.924015, 0.817381, 1], [0.930655, 0.928881, 0.830995, 1], [0.93336, 0.933631, 0.844405, 1], [0.936466, 0.938267, 0.857583, 1], [0.939982, 0.942791, 0.870499, 1], [0.943914, 0.947207, 0.883122, 1], [0.948267, 0.951519, 0.895421, 1], [0.953044, 0.955732, 0.907359, 1], [0.958246, 0.959852, 0.918901, 1], [0.963869, 0.963887, 0.930004, 1], [0.969909, 0.967845, 0.940623, 1], [0.976355, 0.971737, 0.950704, 1], [0.983195, 0.97558, 0.960181, 1], [0.990402, 0.979395, 0.968966, 1], [0.99793, 0.983217, 0.97692, 1]] };
function m(e2) {
  return e2 >= 1e3 ? (e2 / 1e3).toFixed(1) : Math.round(e2).toString();
}
function f(e2) {
  return e2 >= 1e3 ? "kHz" : "Hz";
}
function b(e2, t2, s2, r2, a2) {
  const o2 = c(s2, a2);
  return (function(e3, t3) {
    switch (t3) {
      case "mel":
        return i(e3);
      case "logarithmic":
        return n(e3);
      case "bark":
        return l(e3);
      case "erb":
        return h(e3);
      default:
        return e3;
    }
  })(o2 + e2 / t2 * (c(r2, a2) - o2), a2);
}
function w(e2, t2, s2, i2) {
  switch (this.bufferSize = e2, this.sampleRate = t2, this.bandwidth = 2 / e2 * (t2 / 2), this.sinTable = new Float32Array(e2), this.cosTable = new Float32Array(e2), this.windowValues = new Float32Array(e2), this.reverseTable = new Uint32Array(e2), this.peakBand = 0, this.peak = 0, s2) {
    case "bartlett":
      for (let t3 = 0; t3 < e2; t3++) this.windowValues[t3] = 2 / (e2 - 1) * ((e2 - 1) / 2 - Math.abs(t3 - (e2 - 1) / 2));
      break;
    case "bartlettHann":
      for (let t3 = 0; t3 < e2; t3++) this.windowValues[t3] = 0.62 - 0.48 * Math.abs(t3 / (e2 - 1) - 0.5) - 0.38 * Math.cos(2 * Math.PI * t3 / (e2 - 1));
      break;
    case "blackman":
      i2 = i2 || 0.16;
      for (let t3 = 0; t3 < e2; t3++) this.windowValues[t3] = (1 - i2) / 2 - 0.5 * Math.cos(2 * Math.PI * t3 / (e2 - 1)) + i2 / 2 * Math.cos(4 * Math.PI * t3 / (e2 - 1));
      break;
    case "cosine":
      for (let t3 = 0; t3 < e2; t3++) this.windowValues[t3] = Math.cos(Math.PI * t3 / (e2 - 1) - Math.PI / 2);
      break;
    case "gauss":
      i2 = i2 || 0.25;
      for (let t3 = 0; t3 < e2; t3++) this.windowValues[t3] = Math.pow(Math.E, -0.5 * Math.pow((t3 - (e2 - 1) / 2) / (i2 * (e2 - 1) / 2), 2));
      break;
    case "hamming":
      for (let t3 = 0; t3 < e2; t3++) this.windowValues[t3] = 0.54 - 0.46 * Math.cos(2 * Math.PI * t3 / (e2 - 1));
      break;
    case "hann":
    case void 0:
      for (let t3 = 0; t3 < e2; t3++) this.windowValues[t3] = 0.5 * (1 - Math.cos(2 * Math.PI * t3 / (e2 - 1)));
      break;
    case "lanczoz":
      for (let t3 = 0; t3 < e2; t3++) this.windowValues[t3] = Math.sin(Math.PI * (2 * t3 / (e2 - 1) - 1)) / (Math.PI * (2 * t3 / (e2 - 1) - 1));
      break;
    case "rectangular":
      for (let t3 = 0; t3 < e2; t3++) this.windowValues[t3] = 1;
      break;
    case "triangular":
      for (let t3 = 0; t3 < e2; t3++) this.windowValues[t3] = 2 / e2 * (e2 / 2 - Math.abs(t3 - (e2 - 1) / 2));
      break;
    default:
      throw Error("No such window function '" + s2 + "'");
  }
  let r2 = 1, n2 = e2 >> 1;
  for (; r2 < e2; ) {
    for (let e3 = 0; e3 < r2; e3++) this.reverseTable[e3 + r2] = this.reverseTable[e3] + n2;
    r2 <<= 1, n2 >>= 1;
  }
  for (let t3 = 0; t3 < e2; t3++) this.sinTable[t3] = Math.sin(-Math.PI / t3), this.cosTable[t3] = Math.cos(-Math.PI / t3);
  this.calculateSpectrum = function(e3) {
    const t3 = this.bufferSize, s3 = this.cosTable, i3 = this.sinTable, r3 = this.reverseTable, n3 = new Float32Array(t3), a2 = new Float32Array(t3), l2 = 2 / this.bufferSize, o2 = Math.sqrt, h2 = new Float32Array(t3 / 2);
    let c2, d2, u2;
    const p2 = Math.floor(Math.log(t3) / Math.LN2);
    if (Math.pow(2, p2) !== t3) throw "Invalid buffer size, must be a power of 2.";
    if (t3 !== e3.length) throw "Supplied buffer is not the same size as defined FFT. FFT Size: " + t3 + " Buffer Size: " + e3.length;
    let m2, f2, b2, w2, y2, v2, g2, M2, W2 = 1;
    for (let s4 = 0; s4 < t3; s4++) n3[s4] = e3[r3[s4]] * this.windowValues[r3[s4]], a2[s4] = 0;
    for (; W2 < t3; ) {
      m2 = s3[W2], f2 = i3[W2], b2 = 1, w2 = 0;
      for (let e4 = 0; e4 < W2; e4++) {
        let s4 = e4;
        for (; s4 < t3; ) y2 = s4 + W2, v2 = b2 * n3[y2] - w2 * a2[y2], g2 = b2 * a2[y2] + w2 * n3[y2], n3[y2] = n3[s4] - v2, a2[y2] = a2[s4] - g2, n3[s4] += v2, a2[s4] += g2, s4 += W2 << 1;
        M2 = b2, b2 = M2 * m2 - w2 * f2, w2 = M2 * f2 + w2 * m2;
      }
      W2 <<= 1;
    }
    for (let e4 = 0, s4 = t3 / 2; e4 < s4; e4++) c2 = n3[e4], d2 = a2[e4], u2 = l2 * o2(c2 * c2 + d2 * d2), u2 > this.peak && (this.peakBand = e4, this.peak = u2), h2[e4] = u2;
    return h2;
  };
}
var y = class {
  constructor() {
    this.listeners = {};
  }
  on(e2, t2, s2) {
    if (this.listeners[e2] || (this.listeners[e2] = /* @__PURE__ */ new Set()), null == s2 ? void 0 : s2.once) {
      const s3 = (...i2) => {
        this.un(e2, s3), t2(...i2);
      };
      return this.listeners[e2].add(s3), () => this.un(e2, s3);
    }
    return this.listeners[e2].add(t2), () => this.un(e2, t2);
  }
  un(e2, t2) {
    var s2;
    null === (s2 = this.listeners[e2]) || void 0 === s2 || s2.delete(t2);
  }
  once(e2, t2) {
    return this.on(e2, t2, { once: true });
  }
  unAll() {
    this.listeners = {};
  }
  emit(e2, ...t2) {
    this.listeners[e2] && this.listeners[e2].forEach(((e3) => e3(...t2)));
  }
};
var v = class extends y {
  constructor(e2) {
    super(), this.subscriptions = [], this.isDestroyed = false, this.options = e2;
  }
  onInit() {
  }
  _init(e2) {
    this.isDestroyed && (this.subscriptions = [], this.isDestroyed = false), this.wavesurfer = e2, this.onInit();
  }
  destroy() {
    this.emit("destroy"), this.subscriptions.forEach(((e2) => e2())), this.subscriptions = [], this.isDestroyed = true, this.wavesurfer = void 0;
  }
};
function g(e2, t2) {
  const s2 = t2.xmlns ? document.createElementNS(t2.xmlns, e2) : document.createElement(e2);
  for (const [e3, i2] of Object.entries(t2)) if ("children" === e3 && i2) for (const [e4, t3] of Object.entries(i2)) t3 instanceof Node ? s2.appendChild(t3) : "string" == typeof t3 ? s2.appendChild(document.createTextNode(t3)) : s2.appendChild(g(e4, t3));
  else "style" === e3 ? Object.assign(s2.style, i2) : "textContent" === e3 ? s2.textContent = i2 : s2.setAttribute(e3, i2.toString());
  return s2;
}
function M(e2, t2, s2) {
  const i2 = g(e2, t2 || {});
  return null == s2 || s2.appendChild(i2), i2;
}
var W = null;
try {
  Z = "undefined" != typeof module && "function" == typeof module.require && module.require("worker_threads") || "function" == typeof __non_webpack_require__ && __non_webpack_require__("worker_threads") || "function" == typeof __require && require_worker_threads();
  W = Z.Worker;
} catch (e2) {
}
var Z;
function x(e2, t2, s2) {
  var i2 = (function(e3) {
    return Buffer.from(e3, "base64").toString("utf8");
  })(e2), r2 = i2.indexOf("\n", 10) + 1, n2 = i2.substring(r2) + "";
  return function(e3) {
    return new W(n2, Object.assign({}, e3, { eval: true }));
  };
}
function S(e2, t2, s2) {
  var i2 = (function(e3) {
    return atob(e3);
  })(e2), r2 = i2.indexOf("\n", 10) + 1, n2 = i2.substring(r2) + "", a2 = new Blob([n2], { type: "application/javascript" });
  return URL.createObjectURL(a2);
}
var G = "[object process]" === Object.prototype.toString.call("undefined" != typeof process ? process : 0);
function X(e2, t2, s2) {
  return G ? x(e2) : /* @__PURE__ */ (function(e3) {
    var t3;
    return function(s3) {
      return t3 = t3 || S(e3), new Worker(t3, s3);
    };
  })(e2);
}
var k = X("Lyogcm9sbHVwLXBsdWdpbi13ZWItd29ya2VyLWxvYWRlciAqLwohZnVuY3Rpb24oKXsidXNlIHN0cmljdCI7Y29uc3QgdD0xZTMqTWF0aC5sb2coMTApLzEwNy45Mzk7ZnVuY3Rpb24gZSh0KXtyZXR1cm4gMjU5NSpNYXRoLmxvZzEwKDErdC83MDApfWZ1bmN0aW9uIGEodCl7cmV0dXJuIDcwMCooTWF0aC5wb3coMTAsdC8yNTk1KS0xKX1mdW5jdGlvbiByKHQpe3JldHVybiBNYXRoLmxvZzEwKE1hdGgubWF4KDEsdCkpfWZ1bmN0aW9uIHModCl7cmV0dXJuIE1hdGgucG93KDEwLHQpfWZ1bmN0aW9uIG4odCl7bGV0IGU9MjYuODEqdC8oMTk2MCt0KS0uNTM7cmV0dXJuIGU8MiYmKGUrPS4xNSooMi1lKSksZT4yMC4xJiYoZSs9LjIyKihlLTIwLjEpKSxlfWZ1bmN0aW9uIG8odCl7cmV0dXJuIHQ8MiYmKHQ9KHQtLjMpLy44NSksdD4yMC4xJiYodD0odCs0LjQyMikvMS4yMiksKHQrLjUzKS8oMjYuMjgtdCkqMTk2MH1mdW5jdGlvbiBsKGUpe3JldHVybiB0Kk1hdGgubG9nMTAoMSsuMDA0MzcqZSl9ZnVuY3Rpb24gaShlKXtyZXR1cm4oTWF0aC5wb3coMTAsZS90KS0xKS8uMDA0Mzd9ZnVuY3Rpb24gaCh0LGUsYSxyLHMpe2NvbnN0IG49cigwKSxvPXIoYS8yKSxsPUFycmF5LmZyb20oe2xlbmd0aDp0fSwoKCk9PkFycmF5KGUvMisxKS5maWxsKDApKSksaT1hL2U7Zm9yKGxldCBlPTA7ZTx0O2UrKyl7Y29uc3QgYT1zKG4rZS90KihvLW4pKSxyPU1hdGguZmxvb3IoYS9pKSxoPXIqaSxjPShhLWgpLygocisxKSppLWgpO2xbZV1bcl09MS1jLGxbZV1bcisxXT1jfXJldHVybiBsfWZ1bmN0aW9uIGModCxlKXtjb25zdCBhPWUubGVuZ3RoLHI9RmxvYXQzMkFycmF5LmZyb20oe2xlbmd0aDphfSwoKCk9PjApKTtmb3IobGV0IHM9MDtzPGE7cysrKWZvcihsZXQgYT0wO2E8dC5sZW5ndGg7YSsrKXJbc10rPXRbYV0qZVtzXVthXTtyZXR1cm4gcn1mdW5jdGlvbiB1KHQsZSxhLHIpe3N3aXRjaCh0aGlzLmJ1ZmZlclNpemU9dCx0aGlzLnNhbXBsZVJhdGU9ZSx0aGlzLmJhbmR3aWR0aD0yL3QqKGUvMiksdGhpcy5zaW5UYWJsZT1uZXcgRmxvYXQzMkFycmF5KHQpLHRoaXMuY29zVGFibGU9bmV3IEZsb2F0MzJBcnJheSh0KSx0aGlzLndpbmRvd1ZhbHVlcz1uZXcgRmxvYXQzMkFycmF5KHQpLHRoaXMucmV2ZXJzZVRhYmxlPW5ldyBVaW50MzJBcnJheSh0KSx0aGlzLnBlYWtCYW5kPTAsdGhpcy5wZWFrPTAsYSl7Y2FzZSJiYXJ0bGV0dCI6Zm9yKGxldCBlPTA7ZTx0O2UrKyl0aGlzLndpbmRvd1ZhbHVlc1tlXT0yLyh0LTEpKigodC0xKS8yLU1hdGguYWJzKGUtKHQtMSkvMikpO2JyZWFrO2Nhc2UiYmFydGxldHRIYW5uIjpmb3IobGV0IGU9MDtlPHQ7ZSsrKXRoaXMud2luZG93VmFsdWVzW2VdPS42Mi0uNDgqTWF0aC5hYnMoZS8odC0xKS0uNSktLjM4Kk1hdGguY29zKDIqTWF0aC5QSSplLyh0LTEpKTticmVhaztjYXNlImJsYWNrbWFuIjpyPXJ8fC4xNjtmb3IobGV0IGU9MDtlPHQ7ZSsrKXRoaXMud2luZG93VmFsdWVzW2VdPSgxLXIpLzItLjUqTWF0aC5jb3MoMipNYXRoLlBJKmUvKHQtMSkpK3IvMipNYXRoLmNvcyg0Kk1hdGguUEkqZS8odC0xKSk7YnJlYWs7Y2FzZSJjb3NpbmUiOmZvcihsZXQgZT0wO2U8dDtlKyspdGhpcy53aW5kb3dWYWx1ZXNbZV09TWF0aC5jb3MoTWF0aC5QSSplLyh0LTEpLU1hdGguUEkvMik7YnJlYWs7Y2FzZSJnYXVzcyI6cj1yfHwuMjU7Zm9yKGxldCBlPTA7ZTx0O2UrKyl0aGlzLndpbmRvd1ZhbHVlc1tlXT1NYXRoLnBvdyhNYXRoLkUsLS41Kk1hdGgucG93KChlLSh0LTEpLzIpLyhyKih0LTEpLzIpLDIpKTticmVhaztjYXNlImhhbW1pbmciOmZvcihsZXQgZT0wO2U8dDtlKyspdGhpcy53aW5kb3dWYWx1ZXNbZV09LjU0LS40NipNYXRoLmNvcygyKk1hdGguUEkqZS8odC0xKSk7YnJlYWs7Y2FzZSJoYW5uIjpjYXNlIHZvaWQgMDpmb3IobGV0IGU9MDtlPHQ7ZSsrKXRoaXMud2luZG93VmFsdWVzW2VdPS41KigxLU1hdGguY29zKDIqTWF0aC5QSSplLyh0LTEpKSk7YnJlYWs7Y2FzZSJsYW5jem96Ijpmb3IobGV0IGU9MDtlPHQ7ZSsrKXRoaXMud2luZG93VmFsdWVzW2VdPU1hdGguc2luKE1hdGguUEkqKDIqZS8odC0xKS0xKSkvKE1hdGguUEkqKDIqZS8odC0xKS0xKSk7YnJlYWs7Y2FzZSJyZWN0YW5ndWxhciI6Zm9yKGxldCBlPTA7ZTx0O2UrKyl0aGlzLndpbmRvd1ZhbHVlc1tlXT0xO2JyZWFrO2Nhc2UidHJpYW5ndWxhciI6Zm9yKGxldCBlPTA7ZTx0O2UrKyl0aGlzLndpbmRvd1ZhbHVlc1tlXT0yL3QqKHQvMi1NYXRoLmFicyhlLSh0LTEpLzIpKTticmVhaztkZWZhdWx0OnRocm93IEVycm9yKCJObyBzdWNoIHdpbmRvdyBmdW5jdGlvbiAnIithKyInIil9bGV0IHM9MSxuPXQ+PjE7Zm9yKDtzPHQ7KXtmb3IobGV0IHQ9MDt0PHM7dCsrKXRoaXMucmV2ZXJzZVRhYmxlW3Qrc109dGhpcy5yZXZlcnNlVGFibGVbdF0rbjtzPDw9MSxuPj49MX1mb3IobGV0IGU9MDtlPHQ7ZSsrKXRoaXMuc2luVGFibGVbZV09TWF0aC5zaW4oLU1hdGguUEkvZSksdGhpcy5jb3NUYWJsZVtlXT1NYXRoLmNvcygtTWF0aC5QSS9lKTt0aGlzLmNhbGN1bGF0ZVNwZWN0cnVtPWZ1bmN0aW9uKHQpe2NvbnN0IGU9dGhpcy5idWZmZXJTaXplLGE9dGhpcy5jb3NUYWJsZSxyPXRoaXMuc2luVGFibGUscz10aGlzLnJldmVyc2VUYWJsZSxuPW5ldyBGbG9hdDMyQXJyYXkoZSksbz1uZXcgRmxvYXQzMkFycmF5KGUpLGw9Mi90aGlzLmJ1ZmZlclNpemUsaT1NYXRoLnNxcnQsaD1uZXcgRmxvYXQzMkFycmF5KGUvMik7bGV0IGMsdSxmO2NvbnN0IE09TWF0aC5mbG9vcihNYXRoLmxvZyhlKS9NYXRoLkxOMik7aWYoTWF0aC5wb3coMixNKSE9PWUpdGhyb3ciSW52YWxpZCBidWZmZXIgc2l6ZSwgbXVzdCBiZSBhIHBvd2VyIG9mIDIuIjtpZihlIT09dC5sZW5ndGgpdGhyb3ciU3VwcGxpZWQgYnVmZmVyIGlzIG5vdCB0aGUgc2FtZSBzaXplIGFzIGRlZmluZWQgRkZULiBGRlQgU2l6ZTogIitlKyIgQnVmZmVyIFNpemU6ICIrdC5sZW5ndGg7bGV0IHcsYixkLHAsZyxtLGsseSxUPTE7Zm9yKGxldCBhPTA7YTxlO2ErKyluW2FdPXRbc1thXV0qdGhpcy53aW5kb3dWYWx1ZXNbc1thXV0sb1thXT0wO2Zvcig7VDxlOyl7dz1hW1RdLGI9cltUXSxkPTEscD0wO2ZvcihsZXQgdD0wO3Q8VDt0Kyspe2xldCBhPXQ7Zm9yKDthPGU7KWc9YStULG09ZCpuW2ddLXAqb1tnXSxrPWQqb1tnXStwKm5bZ10sbltnXT1uW2FdLW0sb1tnXT1vW2FdLWssblthXSs9bSxvW2FdKz1rLGErPVQ8PDE7eT1kLGQ9eSp3LXAqYixwPXkqYitwKnd9VDw8PTF9Zm9yKGxldCB0PTAsYT1lLzI7dDxhO3QrKyljPW5bdF0sdT1vW3RdLGY9bCppKGMqYyt1KnUpLGY+dGhpcy5wZWFrJiYodGhpcy5wZWFrQmFuZD10LHRoaXMucGVhaz1mKSxoW3RdPWY7cmV0dXJuIGh9fWxldCBmPW51bGw7c2VsZi5vbm1lc3NhZ2U9ZnVuY3Rpb24odCl7Y29uc3R7dHlwZTpNLGlkOncsYXVkaW9EYXRhOmIsb3B0aW9uczpkfT10LmRhdGE7aWYoImNhbGN1bGF0ZUZyZXF1ZW5jaWVzIj09PU0pdHJ5e2NvbnN0IHQ9ZnVuY3Rpb24odCxNKXtjb25zdHtzdGFydFRpbWU6dyxlbmRUaW1lOmIsc2FtcGxlUmF0ZTpkLGZmdFNhbXBsZXM6cCx3aW5kb3dGdW5jOmcsYWxwaGE6bSxub3ZlcmxhcDprLHNjYWxlOnksZ2FpbkRCOlQscmFuZ2VEQjpGLHNwbGl0Q2hhbm5lbHM6SX09TSxWPU1hdGguZmxvb3IodypkKSxBPU1hdGguZmxvb3IoYipkKSxQPUk/dC5sZW5ndGg6MTtmJiZmLmJ1ZmZlclNpemU9PT1wfHwoZj1uZXcgdShwLGQsZyxtfHwuMTYpKTtjb25zdCBTPWZ1bmN0aW9uKHQsYyx1LGYpe3N3aXRjaCh0KXtjYXNlIm1lbCI6cmV0dXJuIGgoYyx1LGYsZSxhKTtjYXNlImxvZ2FyaXRobWljIjpyZXR1cm4gaChjLHUsZixyLHMpO2Nhc2UiYmFyayI6cmV0dXJuIGgoYyx1LGYsbixvKTtjYXNlImVyYiI6cmV0dXJuIGgoYyx1LGYsbCxpKTtkZWZhdWx0OnJldHVybiBudWxsfX0oeSxwLzIscCxkKTtsZXQgej1rfHxNYXRoLm1heCgwLE1hdGgucm91bmQoLjUqcCkpO2NvbnN0IHY9LjUqcDt6PU1hdGgubWluKHosdik7Y29uc3QgQj1NYXRoLm1heCg2NCwuMjUqcCkscT1NYXRoLm1heChCLHAteikseD1bXTtmb3IobGV0IGU9MDtlPFA7ZSsrKXtjb25zdCBhPXRbZV0scj1bXTtmb3IobGV0IHQ9Vjt0K3A8QTt0Kz1xKXtjb25zdCBlPWEuc2xpY2UodCx0K3ApO2xldCBzPWYuY2FsY3VsYXRlU3BlY3RydW0oZSk7UyYmKHM9YyhzLFMpKTtjb25zdCBuPW5ldyBVaW50OEFycmF5KHMubGVuZ3RoKSxvPVQrRjtmb3IobGV0IHQ9MDt0PHMubGVuZ3RoO3QrKyl7Y29uc3QgZT1zW3RdPjFlLTEyP3NbdF06MWUtMTIsYT0yMCpNYXRoLmxvZzEwKGUpO25bdF09YTwtbz8wOmE+LVQ/MjU1Ok1hdGgucm91bmQoKGErVCkvRioyNTUpfXIucHVzaChuKX14LnB1c2gocil9cmV0dXJuIHh9KGIsZCksTT17dHlwZToiZnJlcXVlbmNpZXNSZXN1bHQiLGlkOncscmVzdWx0OnR9O3NlbGYucG9zdE1lc3NhZ2UoTSl9Y2F0Y2godCl7Y29uc3QgZT17dHlwZToiZnJlcXVlbmNpZXNSZXN1bHQiLGlkOncsZXJyb3I6dCBpbnN0YW5jZW9mIEVycm9yP3QubWVzc2FnZTpTdHJpbmcodCl9O3NlbGYucG9zdE1lc3NhZ2UoZSl9fX0oKTsKLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3BlY3Ryb2dyYW0td29ya2VyLmpzLm1hcAoK");
var C = class _C extends v {
  static create(e2) {
    return new _C(e2 || {});
  }
  constructor(e2) {
    var t2, s2;
    if (super(e2), this.canvases = [], this.useWebWorker = false, this.worker = null, this.workerPromises = /* @__PURE__ */ new Map(), this.cachedFrequencies = null, this.cachedResampledData = null, this.cachedBuffer = null, this.cachedWidth = 0, this.renderTimeout = null, this.isRendering = false, this.lastZoomLevel = 0, this.renderThrottleMs = 50, this.zoomThreshold = 0.05, this.drawnCanvases = {}, this.pendingBitmaps = /* @__PURE__ */ new Set(), this.isScrollable = false, this.scrollUnsubscribe = null, this.frequenciesDataUrl = e2.frequenciesDataUrl, this.frequenciesDataUrl && !e2.sampleRate) throw new Error("sampleRate option is required when using frequenciesDataUrl");
    this.container = "string" == typeof e2.container ? document.querySelector(e2.container) : e2.container, this.useWebWorker = true === e2.useWebWorker, this.colorMap = (function(e3 = "roseus") {
      if (e3 && "string" != typeof e3) {
        if (e3.length < 256) throw new Error("Colormap must contain 256 elements");
        for (let t4 = 0; t4 < e3.length; t4++) if (4 !== e3[t4].length) throw new Error("ColorMap entries must contain 4 values");
        return e3;
      }
      const t3 = p[e3];
      if (!t3) throw Error("No such colormap '" + e3 + "'");
      return t3();
    })(e2.colorMap), this.fftSamples = e2.fftSamples || 512, this.height = e2.height || 200, this.noverlap = e2.noverlap || null, this.windowFunc = e2.windowFunc || "hann", this.alpha = e2.alpha, this.frequencyMin = e2.frequencyMin || 0, this.frequencyMax = e2.frequencyMax || 0, this.gainDB = null !== (t2 = e2.gainDB) && void 0 !== t2 ? t2 : 20, this.rangeDB = null !== (s2 = e2.rangeDB) && void 0 !== s2 ? s2 : 80, this.scale = e2.scale || "mel", this.numMelFilters = this.fftSamples / 2, this.numLogFilters = this.fftSamples / 2, this.numBarkFilters = this.fftSamples / 2, this.numErbFilters = this.fftSamples / 2, e2.maxCanvasWidth && (_C.MAX_CANVAS_WIDTH = e2.maxCanvasWidth), this.renderThrottleMs = 50, this.zoomThreshold = 0.05, this.createWrapper(), this.createCanvas(), this.useWebWorker && this.initializeWorker();
  }
  initializeWorker() {
    if ("undefined" != typeof window && "undefined" != typeof Worker) try {
      this.worker = new k(), this.worker.onmessage = (e2) => {
        const { type: t2, id: s2, result: i2, error: r2 } = e2.data;
        if ("frequenciesResult" === t2) {
          const e3 = this.workerPromises.get(s2);
          e3 && (this.workerPromises.delete(s2), r2 ? e3.reject(new Error(r2)) : e3.resolve(i2));
        }
      }, this.worker.onerror = (e2) => {
        console.warn("Spectrogram worker error, falling back to main thread:", e2), this.worker = null;
      };
    } catch (e2) {
      console.warn("Failed to initialize worker, falling back to main thread:", e2), this.worker = null;
    }
    else console.warn("Worker not available in this environment, using main thread calculation");
  }
  onInit() {
    this.wrapper || this.createWrapper(), this.canvasContainer || this.createCanvas(), this.container = this.wavesurfer.getWrapper(), this.container.appendChild(this.wrapper), this.wavesurfer.options.fillParent && Object.assign(this.wrapper.style, { width: "100%", overflowX: "hidden", overflowY: "hidden" }), this.subscriptions.push(this.wavesurfer.on("redraw", (() => this.throttledRender()))), this.wavesurfer.getDecodedData() && setTimeout((() => {
      this.throttledRender();
    }), 0);
  }
  destroy() {
    this.unAll(), this.wavesurfer && ("function" == typeof this._onReady && this.wavesurfer.un("ready", this._onReady), "function" == typeof this._onRender && this.wavesurfer.un("redraw", this._onRender)), this.renderTimeout && (clearTimeout(this.renderTimeout), this.renderTimeout = null), this.scrollUnsubscribe && (this.scrollUnsubscribe(), this.scrollUnsubscribe = null), this.pendingBitmaps.clear(), this.worker && (this.worker.terminate(), this.worker = null), this.cachedFrequencies = null, this.cachedResampledData = null, this.cachedBuffer = null, this.clearCanvases(), this.canvasContainer && (this.canvasContainer.remove(), this.canvasContainer = null), this.wrapper && (this.wrapper.remove(), this.wrapper = null), this.labelsEl && (this.labelsEl.remove(), this.labelsEl = null), this.container = null, this.isRendering = false, this.lastZoomLevel = 0, this.wavesurfer = null, this.util = null, this.options = null, super.destroy();
  }
  loadFrequenciesData(t2) {
    return e(this, void 0, void 0, (function* () {
      const e2 = yield fetch(t2);
      if (!e2.ok) throw new Error("Unable to fetch frequencies data");
      const s2 = yield e2.json();
      this.drawSpectrogram(s2);
    }));
  }
  getFrequenciesData() {
    return e(this, void 0, void 0, (function* () {
      var e2;
      const t2 = null === (e2 = this.wavesurfer) || void 0 === e2 ? void 0 : e2.getDecodedData();
      if (!t2) return null;
      if (this.cachedBuffer === t2 && this.cachedFrequencies) return this.cachedFrequencies;
      {
        const e3 = yield this.getFrequencies(t2);
        return this.cachedFrequencies = e3, this.cachedBuffer = t2, e3;
      }
    }));
  }
  clearCache() {
    this.cachedFrequencies = null, this.cachedResampledData = null, this.cachedBuffer = null, this.cachedWidth = 0, this.lastZoomLevel = 0;
  }
  createWrapper() {
    var e2, t2;
    this.wrapper = M("div", { style: { display: "block", position: "relative", userSelect: "none" } }), this.options.labels && (this.labelsEl = M("canvas", { part: "spec-labels", style: { position: "absolute", zIndex: 9, width: "55px", height: "100%" } }, this.wrapper)), this._onWrapperClick = (e2 = this.wrapper, t2 = this.emit.bind(this), (s2) => {
      const i2 = e2.getBoundingClientRect(), r2 = s2.clientX - i2.left, n2 = i2.width;
      t2("click", r2 / n2);
    }), this.wrapper.addEventListener("click", this._onWrapperClick);
  }
  createCanvas() {
    this.canvasContainer = M("div", { style: { position: "absolute", left: 0, top: 0, width: "100%", height: "100%", zIndex: 4 } }, this.wrapper);
  }
  createSingleCanvas(e2, t2, s2) {
    const i2 = M("canvas", { style: { position: "absolute", left: `${Math.round(s2)}px`, top: "0", width: `${e2}px`, height: `${t2}px`, zIndex: 4 } });
    return i2.width = Math.round(e2), i2.height = Math.round(t2), this.canvasContainer.appendChild(i2), i2;
  }
  clearCanvases() {
    this.canvases.forEach(((e2) => e2.remove())), this.canvases = [], this.drawnCanvases = {};
  }
  clearExcessCanvases() {
    Object.keys(this.drawnCanvases).length > _C.MAX_NODES && this.clearCanvases();
  }
  throttledRender() {
    var e2;
    if (this.renderTimeout && clearTimeout(this.renderTimeout), this.isRendering) return;
    const t2 = (null === (e2 = this.wavesurfer) || void 0 === e2 ? void 0 : e2.options.minPxPerSec) || 0;
    Math.abs(t2 - this.lastZoomLevel) / Math.max(t2, this.lastZoomLevel, 1) < this.zoomThreshold && this.cachedFrequencies ? this.renderTimeout = window.setTimeout((() => {
      this.fastRender();
    }), this.renderThrottleMs) : this.renderTimeout = window.setTimeout((() => {
      this.render();
    }), this.renderThrottleMs);
  }
  render() {
    return e(this, void 0, void 0, (function* () {
      var e2, t2;
      if (!this.isRendering) {
        this.isRendering = true;
        try {
          if (this.frequenciesDataUrl) yield this.loadFrequenciesData(this.frequenciesDataUrl);
          else {
            if (null === (e2 = this.wavesurfer) || void 0 === e2 ? void 0 : e2.getDecodedData()) {
              yield this.getFrequenciesData();
              this.drawSpectrogram(this.cachedFrequencies);
            }
          }
          this.lastZoomLevel = (null === (t2 = this.wavesurfer) || void 0 === t2 ? void 0 : t2.options.minPxPerSec) || 0;
        } finally {
          this.isRendering = false;
        }
      }
    }));
  }
  fastRender() {
    var e2;
    if (!this.isRendering && this.cachedFrequencies) {
      this.isRendering = true;
      try {
        this.drawSpectrogram(this.cachedFrequencies), this.lastZoomLevel = (null === (e2 = this.wavesurfer) || void 0 === e2 ? void 0 : e2.options.minPxPerSec) || 0;
      } finally {
        this.isRendering = false;
      }
    }
  }
  drawSpectrogram(e2) {
    var t2, s2, i2;
    isNaN(e2[0][0]) || (e2 = [e2]), this.clearCanvases();
    const r2 = this.height * e2.length;
    this.wrapper.style.height = r2 + "px";
    const n2 = this.getWidth(), a2 = Math.min(_C.MAX_CANVAS_WIDTH, n2);
    if (0 === n2 || 0 === r2) return;
    const l2 = Math.ceil(n2 / a2);
    let o2;
    const h2 = (null === (t2 = e2[0]) || void 0 === t2 ? void 0 : t2.length) || 0;
    n2 !== h2 ? this.cachedResampledData && this.cachedWidth === n2 ? o2 = this.cachedResampledData : (o2 = this.efficientResample(e2, n2), this.cachedResampledData = o2, this.cachedWidth = n2) : o2 = e2;
    const c2 = (null === (s2 = this.buffer) || void 0 === s2 ? void 0 : s2.sampleRate) ? this.buffer.sampleRate / 2 : (this.options.sampleRate || 0) / 2, d2 = this.frequencyMin, u2 = this.frequencyMax, p2 = u2 > c2, m2 = p2 ? this.colorMap[this.colorMap.length - 1] : null, f2 = (e3) => {
      if (e3 < 0 || e3 >= l2) return;
      if (this.drawnCanvases[e3]) return;
      this.drawnCanvases[e3] = true;
      const t3 = e3 * a2, s3 = Math.min(a2, n2 - t3);
      if (s3 <= 0) return;
      const i3 = this.createSingleCanvas(s3, r2, t3);
      this.canvases.push(i3);
      const h3 = i3.getContext("2d");
      if (h3) {
        p2 && m2 && (h3.fillStyle = `rgba(${255 * m2[0]}, ${255 * m2[1]}, ${255 * m2[2]}, ${m2[3]})`, h3.fillRect(0, 0, s3, r2));
        for (let e4 = 0; e4 < o2.length; e4++) this.drawSpectrogramSegment(o2[e4], h3, s3, this.height, e4 * this.height, t3, n2, c2, d2, u2);
      }
    };
    if (this.isScrollable = n2 > this.getWrapperWidth(), this.scrollUnsubscribe && (this.scrollUnsubscribe(), this.scrollUnsubscribe = null), !this.isScrollable || l2 <= 3) for (let e3 = 0; e3 < l2; e3++) f2(e3);
    else {
      const e3 = () => {
        var e4;
        const t4 = null === (e4 = this.wavesurfer) || void 0 === e4 ? void 0 : e4.getWrapper();
        if (!t4) return;
        const s4 = t4.scrollLeft || 0, i3 = t4.clientWidth || 0, r4 = Math.max(0, s4 - 0.5 * i3), a3 = Math.min(n2, s4 + 1.5 * i3), o3 = Math.floor(r4 / n2 * l2), h3 = Math.min(Math.ceil(a3 / n2 * l2), l2 - 1);
        Object.keys(this.drawnCanvases).length > _C.MAX_NODES && this.clearExcessCanvases();
        for (let e5 = o3; e5 <= h3; e5++) f2(e5);
      };
      e3();
      let t3 = null;
      const s3 = () => {
        t3 && clearTimeout(t3), t3 = window.setTimeout(e3, 16);
      }, r3 = null === (i2 = this.wavesurfer) || void 0 === i2 ? void 0 : i2.getWrapper();
      r3 && (r3.addEventListener("scroll", s3, { passive: true }), this.scrollUnsubscribe = () => {
        r3.removeEventListener("scroll", s3), t3 && clearTimeout(t3);
      });
    }
    this.options.labels && this.loadLabels(this.options.labelsBackground, "12px", "12px", "", this.options.labelsColor, this.options.labelsHzColor || this.options.labelsColor, "center", "#specLabels", e2.length), this.emit("ready");
  }
  drawSpectrogramSegment(e2, t2, s2, i2, r2, n2, a2, l2, o2, h2) {
    const d2 = e2[0].length, u2 = Math.floor(n2 / a2 * e2.length), p2 = Math.min(Math.ceil((n2 + s2) / a2 * e2.length), e2.length), m2 = e2.slice(u2, p2);
    if (0 === m2.length) return;
    const f2 = m2.length, b2 = new ImageData(f2, d2), w2 = b2.data;
    this.fillImageDataQuality(w2, m2, f2, d2);
    const y2 = c(o2, this.scale) / c(l2, this.scale), v2 = c(h2, this.scale) / c(l2, this.scale), g2 = Math.min(1, v2), M2 = createImageBitmap(b2, 0, Math.round(d2 * (1 - g2)), f2, Math.round(d2 * (g2 - y2)));
    this.pendingBitmaps.add(M2), M2.then(((e3) => {
      if (this.pendingBitmaps.delete(M2), t2.canvas.parentNode) {
        const n3 = i2 * g2 / v2, a3 = r2 + i2 * (1 - g2 / v2);
        t2.drawImage(e3, 0, a3, s2, n3), "close" in e3 && e3.close();
      }
    })).catch(((e3) => {
      this.pendingBitmaps.delete(M2);
    }));
  }
  getWidth() {
    return this.wavesurfer.getWrapper().offsetWidth;
  }
  getWrapperWidth() {
    var e2, t2;
    return (null === (t2 = null === (e2 = this.wavesurfer) || void 0 === e2 ? void 0 : e2.getWrapper()) || void 0 === t2 ? void 0 : t2.clientWidth) || 0;
  }
  calculateFrequenciesWithWorker(t2) {
    return e(this, void 0, void 0, (function* () {
      var e2, s2;
      if (!this.worker) throw new Error("Worker not available");
      const i2 = this.fftSamples, r2 = (null !== (e2 = this.options.splitChannels) && void 0 !== e2 ? e2 : null === (s2 = this.wavesurfer) || void 0 === s2 ? void 0 : s2.options.splitChannels) ? t2.numberOfChannels : 1;
      let n2 = this.noverlap;
      if (!n2) {
        const e3 = this.getWidth(), s3 = t2.length / e3;
        n2 = Math.max(0, Math.round(i2 - s3));
      }
      const a2 = [];
      for (let e3 = 0; e3 < r2; e3++) a2.push(t2.getChannelData(e3));
      const l2 = `${Date.now()}_${Math.random()}`, o2 = new Promise(((e3, t3) => {
        this.workerPromises.set(l2, { resolve: e3, reject: t3 }), setTimeout((() => {
          this.workerPromises.has(l2) && (this.workerPromises.delete(l2), t3(new Error("Worker timeout")));
        }), 3e4);
      }));
      return this.worker.postMessage({ type: "calculateFrequencies", id: l2, audioData: a2, options: { startTime: 0, endTime: t2.duration, sampleRate: t2.sampleRate, fftSamples: this.fftSamples, windowFunc: this.windowFunc, alpha: this.alpha, noverlap: n2, scale: this.scale, gainDB: this.gainDB, rangeDB: this.rangeDB, splitChannels: this.options.splitChannels || false } }), o2;
    }));
  }
  getFrequencies(t2) {
    return e(this, void 0, void 0, (function* () {
      var e2, c2;
      if (this.frequencyMax = this.frequencyMax || t2.sampleRate / 2, this.buffer = t2, !t2) return [];
      if (this.useWebWorker && this.worker) try {
        return yield this.calculateFrequenciesWithWorker(t2);
      } catch (e3) {
        console.warn("Worker calculation failed, falling back to main thread:", e3);
      }
      const p2 = this.fftSamples, m2 = (null !== (e2 = this.options.splitChannels) && void 0 !== e2 ? e2 : null === (c2 = this.wavesurfer) || void 0 === c2 ? void 0 : c2.options.splitChannels) ? t2.numberOfChannels : 1, f2 = t2.sampleRate, b2 = [];
      let y2 = this.noverlap;
      if (!y2) {
        const e3 = this.getWidth(), s2 = t2.length / e3;
        y2 = Math.max(0, Math.round(p2 - s2));
      }
      let v2 = y2 || Math.max(0, Math.round(0.5 * p2));
      const g2 = 0.5 * p2;
      v2 = Math.min(v2, g2);
      const M2 = Math.max(64, 0.25 * p2), W2 = Math.max(M2, p2 - v2), Z = new w(p2, f2, this.windowFunc, this.alpha), x2 = this.fftSamples / 2, S2 = (function(e3, t3, c3, u2) {
        switch (e3) {
          case "mel":
            return d(t3, c3, u2, s, i);
          case "logarithmic":
            return d(t3, c3, u2, r, n);
          case "bark":
            return d(t3, c3, u2, a, l);
          case "erb":
            return d(t3, c3, u2, o, h);
          default:
            return null;
        }
      })(this.scale, x2, this.fftSamples, f2);
      for (let e3 = 0; e3 < m2; e3++) {
        const s2 = t2.getChannelData(e3), i2 = [];
        for (let e4 = 0; e4 + p2 < s2.length; e4 += W2) {
          const t3 = s2.slice(e4, e4 + p2);
          let r2 = Z.calculateSpectrum(t3);
          S2 && (r2 = u(r2, S2));
          const n2 = new Uint8Array(r2.length), a2 = this.gainDB + this.rangeDB;
          for (let e5 = 0; e5 < r2.length; e5++) {
            const t4 = r2[e5] > 1e-12 ? r2[e5] : 1e-12, s3 = 20 * Math.log10(t4);
            s3 < -a2 ? n2[e5] = 0 : s3 > -this.gainDB ? n2[e5] = 255 : n2[e5] = Math.round((s3 + this.gainDB) / this.rangeDB * 255);
          }
          i2.push(n2);
        }
        b2.push(i2);
      }
      return b2;
    }));
  }
  loadLabels(e2, t2, s2, i2, r2, n2, a2, l2, o2) {
    e2 = e2 || "rgba(68,68,68,0)", t2 = t2 || "12px", s2 = s2 || "12px", i2 = i2 || "Helvetica", r2 = r2 || "#fff", n2 = n2 || "#fff", a2 = a2 || "center";
    const h2 = this.height || 512, c2 = h2 / 256 * 5;
    this.frequencyMin;
    this.frequencyMax;
    const d2 = this.labelsEl.getContext("2d"), u2 = window.devicePixelRatio;
    if (this.labelsEl.height = this.height * o2 * u2, this.labelsEl.width = 55 * u2, d2.scale(u2, u2), d2) for (let l3 = 0; l3 < o2; l3++) {
      let o3;
      for (d2.fillStyle = e2, d2.fillRect(0, l3 * h2, 55, (1 + l3) * h2), d2.fill(), o3 = 0; o3 <= c2; o3++) {
        d2.textAlign = a2, d2.textBaseline = "middle";
        const e3 = b(o3, c2, this.frequencyMin, this.frequencyMax, this.scale), u3 = m(e3), p2 = f(e3), w2 = 16;
        let y2 = (1 + l3) * h2 - o3 / c2 * h2;
        y2 = Math.min(Math.max(y2, l3 * h2 + 10), (1 + l3) * h2 - 10), d2.fillStyle = n2, d2.font = s2 + " " + i2, d2.fillText(p2, w2 + 24, y2), d2.fillStyle = r2, d2.font = t2 + " " + i2, d2.fillText(u3, w2, y2);
      }
    }
  }
  efficientResample(e2, t2) {
    return e2.map(((e3) => this.resampleChannel(e3, t2)));
  }
  resampleChannel(e2, t2) {
    var s2;
    const i2 = e2.length, r2 = (null === (s2 = e2[0]) || void 0 === s2 ? void 0 : s2.length) || 0;
    if (i2 === t2 || 0 === t2) return e2;
    const n2 = i2 / t2, a2 = new Array(t2);
    if (n2 >= 1) for (let s3 = 0; s3 < t2; s3++) {
      const t3 = Math.floor(s3 * n2), l2 = Math.min(Math.ceil((s3 + 1) * n2), i2), o2 = l2 - t3, h2 = new Uint8Array(r2);
      if (1 === o2) h2.set(e2[t3]);
      else for (let s4 = 0; s4 < r2; s4++) {
        let i3 = 0;
        for (let r3 = t3; r3 < l2; r3++) i3 += e2[r3][s4];
        h2[s4] = Math.round(i3 / o2);
      }
      a2[s3] = h2;
    }
    else for (let s3 = 0; s3 < t2; s3++) {
      const t3 = s3 * n2, l2 = Math.floor(t3), o2 = Math.min(l2 + 1, i2 - 1), h2 = t3 - l2, c2 = new Uint8Array(r2);
      if (0 === h2 || l2 === o2) c2.set(e2[l2]);
      else {
        const t4 = e2[l2], s4 = e2[o2], i3 = 1 - h2;
        for (let e3 = 0; e3 < r2; e3++) c2[e3] = Math.round(t4[e3] * i3 + s4[e3] * h2);
      }
      a2[s3] = c2;
    }
    return a2;
  }
  fillImageDataQuality(e2, t2, s2, i2) {
    const r2 = this.colorMap;
    for (let n2 = 0; n2 < s2; n2++) {
      const a2 = t2[n2];
      for (let t3 = 0; t3 < i2; t3++) {
        const l2 = r2[a2[t3]], o2 = 4 * ((i2 - t3 - 1) * s2 + n2);
        e2[o2] = 255 * l2[0], e2[o2 + 1] = 255 * l2[1], e2[o2 + 2] = 255 * l2[2], e2[o2 + 3] = 255 * l2[3];
      }
    }
  }
};
C.MAX_CANVAS_WIDTH = 3e4, C.MAX_NODES = 10;
export {
  C as default
};
//# sourceMappingURL=wavesurfer__js_dist_plugins_spectrogram__esm__js.js.map
