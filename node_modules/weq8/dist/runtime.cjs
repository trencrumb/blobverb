"use strict";Object.defineProperties(exports,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}});const a=require("./functions.207777d9.cjs");let c=()=>({events:{},emit(r,...e){let t=this.events[r]||[];for(let i=0,s=t.length;i<s;i++)t[i](...e)},on(r,e){var t;return(t=this.events[r])!=null&&t.push(e)||(this.events[r]=[e]),()=>{var i;this.events[r]=(i=this.events[r])==null?void 0:i.filter(s=>e!==s)}}});const p=["lowpass12","lowpass24","highpass12","highpass24","bandpass12","bandpass24","lowshelf12","lowshelf24","highshelf12","highshelf24","peaking12","peaking24","notch12","notch24"],u=[{type:"lowshelf12",frequency:30,gain:0,Q:.7,bypass:!1},{type:"peaking12",frequency:200,gain:0,Q:.7,bypass:!1},{type:"peaking12",frequency:1e3,gain:0,Q:.7,bypass:!1},{type:"highshelf12",frequency:5e3,gain:0,Q:.7,bypass:!1},{type:"noop",frequency:350,gain:0,Q:1,bypass:!1},{type:"noop",frequency:350,gain:0,Q:1,bypass:!1},{type:"noop",frequency:350,gain:0,Q:1,bypass:!1},{type:"noop",frequency:350,gain:0,Q:1,bypass:!1}];class g{constructor(e,t=u,i=p){this.audioCtx=e,this.spec=t,this.supportedFilterTypes=i,this.filterbank=[],this.input=e.createGain(),this.output=e.createGain(),this.buildFilterChain(t),this.emitter=c()}connect(e){this.output.connect(e)}disconnect(e){this.output.disconnect(e)}on(e,t){return this.emitter.on(e,t)}setFilterType(e,t){var i;if(t==="noop"&&this.spec[e].type!=="noop"&&!this.spec[e].bypass?this.disconnectFilter(e):t!=="noop"&&this.spec[e].type==="noop"&&!this.spec[e].bypass&&this.connectFilter(e,t),this.spec[e].type=t,t!=="noop"&&!this.spec[e].bypass){let s=(i=this.filterbank.find(n=>n.idx===e))==null?void 0:i.filters;if(!s)throw new Error("Assertion failed: No filters in filterbank");for(let n of s)n.type=a.getBiquadFilterType(t);let l=a.getBiquadFilterOrder(t);for(;s.length>l;){let n=s.length-1,h=s[n],f=s[n-1],o=this.getNextInChain(e);h.disconnect(),f.disconnect(h),f.connect(o),s.splice(n,1)}for(;s.length<l;){let n=this.audioCtx.createBiquadFilter();n.type=a.getBiquadFilterType(t),n.frequency.value=this.spec[e].frequency,n.Q.value=this.spec[e].Q,n.gain.value=this.spec[e].gain;let h=s[s.length-1],f=this.getNextInChain(e);h.disconnect(f),h.connect(n),n.connect(f),s.push(n)}}this.emitter.emit("filtersChanged",this.spec)}toggleBypass(e,t){t&&!this.spec[e].bypass&&this.spec[e].type!=="noop"?this.disconnectFilter(e):!t&&this.spec[e].bypass&&this.spec[e].type!=="noop"&&this.connectFilter(e,this.spec[e].type),this.spec[e].bypass=t,this.emitter.emit("filtersChanged",this.spec)}disconnectFilter(e){var l;let t=(l=this.filterbank.find(n=>n.idx===e))==null?void 0:l.filters;if(!t)throw new Error("Assertion failed: No filters in filterbank when disconnecting filter. Was it connected?");let i=this.getPreviousInChain(e),s=this.getNextInChain(e);i.disconnect(t[0]),t[t.length-1].disconnect(s),i.connect(s),this.filterbank=this.filterbank.filter(n=>n.idx!==e)}connectFilter(e,t){let i=Array.from({length:a.getBiquadFilterOrder(t)},()=>{let n=this.audioCtx.createBiquadFilter();return n.type=a.getBiquadFilterType(t),n.frequency.value=this.spec[e].frequency,n.Q.value=this.spec[e].Q,n.gain.value=this.spec[e].gain,n}),s=this.getPreviousInChain(e),l=this.getNextInChain(e);s.disconnect(l),s.connect(i[0]);for(let n=0;n<i.length-1;n++)i[n].connect(i[n+1]);i[i.length-1].connect(l),this.filterbank.push({idx:e,filters:i})}setFilterFrequency(e,t){this.spec[e].frequency=t;let i=this.filterbank.find(s=>s.idx===e);if(i)for(let s of i.filters)s.frequency.value=t;this.emitter.emit("filtersChanged",this.spec)}setFilterQ(e,t){this.spec[e].Q=t;let i=this.filterbank.find(s=>s.idx===e);if(i)for(let s of i.filters)s.Q.value=t;this.emitter.emit("filtersChanged",this.spec)}setFilterGain(e,t){this.spec[e].gain=t;let i=this.filterbank.find(s=>s.idx===e);if(i)for(let s of i.filters)s.gain.value=t;this.emitter.emit("filtersChanged",this.spec)}getFrequencyResponse(e,t,i,s,l){let n=this.filterbank.find(h=>h.idx===e);return n?(n.filters[t].getFrequencyResponse(i,s,l),!0):!1}buildFilterChain(e){this.filterbank=[];for(let t=0;t<e.length;t++){let i=e[t];if(i.type==="noop"||i.bypass)continue;let s=Array.from({length:a.getBiquadFilterOrder(i.type)},()=>{let l=this.audioCtx.createBiquadFilter();return l.type=a.getBiquadFilterType(i.type),l.frequency.value=i.frequency,l.Q.value=i.Q,l.gain.value=i.gain,l});this.filterbank.push({idx:t,filters:s})}if(this.filterbank.length===0)this.input.connect(this.output);else for(let t=0;t<this.filterbank.length;t++){let{filters:i}=this.filterbank[t];t===0?this.input.connect(i[0]):this.filterbank[t-1].filters[this.filterbank[t-1].filters.length-1].connect(i[0]);for(let s=0;s<i.length-1;s++)i[s].connect(i[s+1]);t===this.filterbank.length-1&&i[i.length-1].connect(this.output)}}getPreviousInChain(e){let t=this.input,i=-1;for(let s of this.filterbank)s.idx<e&&s.idx>i&&(t=s.filters[s.filters.length-1],i=s.idx);return t}getNextInChain(e){let t=this.output,i=this.spec.length;for(let s of this.filterbank)s.idx>e&&s.idx<i&&(t=s.filters[0],i=s.idx);return t}}exports.WEQ8Runtime=g;
