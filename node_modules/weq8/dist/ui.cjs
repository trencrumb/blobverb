"use strict";Object.defineProperties(exports,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}});const u=require("lit"),c=require("lit/decorators.js"),g=require("lit/directives/class-map.js"),l=require("./functions.207777d9.cjs");function p(m,e,t,s){var i=arguments.length,r=i<3?e:s===null?s=Object.getOwnPropertyDescriptor(e,t):s,n;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")r=Reflect.decorate(m,e,t,s);else for(var a=m.length-1;a>=0;a--)(n=m[a])&&(r=(i<3?n(r):i>3?n(e,t,r):n(e,t))||r);return i>3&&r&&Object.defineProperty(e,t,r),r}class q{constructor(e,t){this.runtime=e,this.canvas=t,this.disposed=!1,this.analyser=e.audioCtx.createAnalyser(),this.analyser.fftSize=8192,this.analyser.smoothingTimeConstant=.5,e.connect(this.analyser),this.analysisData=new Uint8Array(this.analyser.frequencyBinCount);let s=Math.log10(e.audioCtx.sampleRate/2)-1;this.canvas.width=this.canvas.offsetWidth*window.devicePixelRatio,this.canvas.height=this.canvas.offsetHeight*window.devicePixelRatio,this.analysisXs=this.calculateAnalysisXs(s),this.resizeObserver=new ResizeObserver(()=>{this.canvas.width=this.canvas.offsetWidth*window.devicePixelRatio,this.canvas.height=this.canvas.offsetHeight*window.devicePixelRatio,this.analysisXs=this.calculateAnalysisXs(s)}),this.resizeObserver.observe(this.canvas)}calculateAnalysisXs(e){return Array.from(this.analysisData).map((t,s)=>{let i=s/this.analysisData.length*(this.runtime.audioCtx.sampleRate/2);return Math.floor((Math.log10(i)-1)/e*this.canvas.width)})}analyse(){let e=()=>{this.disposed||(this.analyser.getByteFrequencyData(this.analysisData),this.draw(),requestAnimationFrame(e))};requestAnimationFrame(e)}draw(){let e=this.canvas.width,t=this.canvas.height,s=this.canvas.height/255,i=this.canvas.getContext("2d");if(!i)throw new Error("Could not get a canvas context!");i.clearRect(0,0,e,t);let r=new Path2D;r.moveTo(0,t);for(let n=0;n<this.analysisData.length;n++){let a=Math.floor(t-this.analysisData[n]*s);r.lineTo(this.analysisXs[n],a)}r.lineTo(e,t),i.fillStyle="rgba(30, 30, 60, 0.7)",i.fill(r),i.strokeStyle="rgb(155, 155, 255)",i.stroke(r)}dispose(){this.disposed=!0,this.analyser.disconnect(),this.resizeObserver.disconnect()}}class F{constructor(e,t){this.runtime=e,this.canvas=t,this.canvas.width=this.canvas.offsetWidth*window.devicePixelRatio,this.canvas.height=this.canvas.offsetHeight*window.devicePixelRatio,this.frequencies=this.calculateFrequencies(),this.filterMagResponse=new Float32Array(this.frequencies.length),this.filterPhaseResponse=new Float32Array(this.frequencies.length),this.frequencyResponse=new Float32Array(this.frequencies.length),this.resizeObserver=new ResizeObserver(()=>{this.canvas.width=this.canvas.offsetWidth*window.devicePixelRatio,this.canvas.height=this.canvas.offsetHeight*window.devicePixelRatio,this.frequencies=this.calculateFrequencies(),this.filterMagResponse=new Float32Array(this.frequencies.length),this.filterPhaseResponse=new Float32Array(this.frequencies.length),this.frequencyResponse=new Float32Array(this.frequencies.length),this.render()}),this.resizeObserver.observe(this.canvas)}dispose(){this.resizeObserver.disconnect()}render(){this.frequencyResponse.fill(1);for(let e=0;e<this.runtime.spec.length;e++)for(let t=0;t<l.getBiquadFilterOrder(this.runtime.spec[e].type);t++)if(this.runtime.getFrequencyResponse(e,t,this.frequencies,this.filterMagResponse,this.filterPhaseResponse))for(let i=0;i<this.frequencyResponse.length;i++)this.frequencyResponse[i]*=this.filterMagResponse[i];this.draw()}draw(){let e=this.canvas.getContext("2d"),t=this.canvas.width,s=this.canvas.height;if(!e)throw new Error("Could not get a canvas context!");e.clearRect(0,0,t,s),e.strokeStyle="#ffffff",e.lineWidth=2,e.beginPath();let i=13,r=-i;for(let n=0;n<this.frequencyResponse.length;n++){let a=this.frequencyResponse[n],h=20*Math.log10(a),o=s-(h-r)/(i-r)*s;n===0?e.moveTo(n,o):e.lineTo(n,o)}e.stroke()}calculateFrequencies(){let e=new Float32Array(this.canvas.width),t=this.runtime.audioCtx.sampleRate/2,s=1,i=Math.log10(t);for(let r=0;r<this.canvas.width;r++){let n=s+r/this.canvas.width*(i-s),a=Math.pow(10,n);e[r]=a}return e}}const x=u.css`
  @import url("https://fonts.googleapis.com/css2?family=Inter:wght@500&display=swap");

  *,
  *::before,
  *::after {
    box-sizing: border-box;
  }

  :host {
    background-color: #111;
    color: white;
    --font-stack: "Inter", sans-serif;
    --font-size: 11px;
    --font-weight: 500;
    font-family: var(--font-stack);
    font-size: var(--font-size);
    font-weight: var(--font-weight);
  }
`,$=[["noop","Add +"],["lowpass12","LP12"],["lowpass24","LP24"],["highpass12","HP12"],["highpass24","HP24"],["lowshelf12","LS12"],["lowshelf24","LS24"],["highshelf12","HS12"],["highshelf24","HS24"],["peaking12","PK12"],["peaking24","PK24"],["notch12","NT12"],["notch24","NT24"]];var b;let y=(b=class extends u.LitElement{constructor(){super(),this.frequencyInputFocused=!1,this.dragStates={frequency:null,gain:null,Q:null},this.addEventListener("click",()=>this.dispatchEvent(new CustomEvent("select",{composed:!0,bubbles:!0})))}render(){if(!this.runtime||this.index===void 0)return;let e=$.filter(s=>this.runtime.supportedFilterTypes.includes(s[0])),t=this.runtime.spec[this.index];return u.html`
      <th>
        <div
          class=${g.classMap({chip:!0,disabled:!l.filterHasFrequency(t.type),bypassed:t.bypass})}
        >
          <div
            class=${g.classMap({filterNumber:!0,bypassed:t.bypass})}
            @click=${()=>this.toggleBypass()}
          >
            ${this.index+1}
          </div>
          <select
            class=${g.classMap({filterTypeSelect:!0,bypassed:t.bypass})}
            @change=${s=>this.setFilterType(s.target.value)}
          >
            ${e.map(([s,i])=>u.html`<option value=${s} ?selected=${t.type===s}>
                  ${i}
                </option>`)}
          </select>
        </div>
      </th>
      <td>
        <input
          class=${g.classMap({frequencyInput:!0,numberInput:!0,bypassed:t.bypass})}
          type="number"
          step="0.1"
          lang="en_EN"
          .value=${l.formatFrequency(t.frequency,this.frequencyInputFocused)}
          ?disabled=${!l.filterHasFrequency(t.type)}
          @focus=${()=>this.frequencyInputFocused=!0}
          @blur=${()=>{this.frequencyInputFocused=!1,this.setFilterFrequency(l.clamp(t.frequency,10,this.nyquist))}}
          @input=${s=>this.setFilterFrequency(s.target.valueAsNumber)}
          @pointerdown=${s=>this.startDraggingValue(s,"frequency")}
          @pointerup=${s=>this.stopDraggingValue(s,"frequency")}
          @pointermove=${s=>this.dragValue(s,"frequency")}
        />
        <span
          class=${g.classMap({frequencyUnit:!0,disabled:!l.filterHasFrequency(t.type),bypassed:t.bypass})}
          >${l.formatFrequencyUnit(t.frequency,this.frequencyInputFocused)}</span
        >
      </td>
      <td>
        <input
          class=${g.classMap({gainInput:!0,numberInput:!0,bypassed:t.bypass})}
          type="number"
          min="-15"
          max="15"
          step="0.1"
          lang="en_EN"
          .value=${t.gain.toFixed(1)}
          ?disabled=${!l.filterHasGain(t.type)}
          @input=${s=>this.setFilterGain(s.target.valueAsNumber)}
          @pointerdown=${s=>this.startDraggingValue(s,"gain")}
          @pointerup=${s=>this.stopDraggingValue(s,"gain")}
          @pointermove=${s=>this.dragValue(s,"gain")}
        />
        <span
          class=${g.classMap({gainUnit:!0,disabled:!l.filterHasGain(t.type),bypassed:t.bypass})}
          >dB</span
        >
      </td>
      <td>
        <input
          class=${g.classMap({qInput:!0,numberInput:!0,bypassed:t.bypass})}
          type="number"
          min="0.1"
          max="18"
          step="0.1"
          .value=${t.Q.toFixed(2)}
          ?disabled=${!l.filterHasQ(t.type)}
          @input=${s=>this.setFilterQ(s.target.valueAsNumber)}
          @pointerdown=${s=>this.startDraggingValue(s,"Q")}
          @pointerup=${s=>this.stopDraggingValue(s,"Q")}
          @pointermove=${s=>this.dragValue(s,"Q")}
        />
      </td>
    `}get nyquist(){var e,t;return((t=(e=this.runtime)==null?void 0:e.audioCtx.sampleRate)!=null?t:48e3)/2}toggleBypass(){!this.runtime||this.index===void 0||this.runtime.toggleBypass(this.index,!this.runtime.spec[this.index].bypass)}setFilterType(e){!this.runtime||this.index===void 0||this.runtime.setFilterType(this.index,e)}setFilterFrequency(e){!this.runtime||this.index===void 0||isNaN(e)||this.runtime.setFilterFrequency(this.index,e)}setFilterGain(e){!this.runtime||this.index===void 0||isNaN(e)||this.runtime.setFilterGain(this.index,e)}setFilterQ(e){!this.runtime||this.index===void 0||isNaN(e)||this.runtime.setFilterQ(this.index,e)}startDraggingValue(e,t){!this.runtime||this.index===void 0||(e.target.setPointerCapture(e.pointerId),this.dragStates={...this.dragStates,[t]:{pointer:e.pointerId,startY:e.clientY,startValue:this.runtime.spec[this.index][t]}})}stopDraggingValue(e,t){var s;!this.runtime||this.index===void 0||((s=this.dragStates[t])==null?void 0:s.pointer)===e.pointerId&&(e.target.releasePointerCapture(e.pointerId),this.dragStates={...this.dragStates,[t]:null})}dragValue(e,t){if(!this.runtime||this.index===void 0)return;let s=this.dragStates[t];if(s&&s.pointer===e.pointerId){let i=s.startY,n=-(e.clientY-i),a=l.clamp(n/150,-1,1);if(t==="frequency"){let h=10,o=this.runtime.audioCtx.sampleRate/2,d=l.toLog10(s.startValue,h,o),f=l.toLin(d+a,h,o);this.runtime.setFilterFrequency(this.index,f)}else if(t==="gain"){let h=a*15;this.runtime.setFilterGain(this.index,l.clamp(s.startValue+h,-15,15))}else if(t==="Q"){let h=.1,o=18,d=l.toLog10(s.startValue,h,o),f=l.toLin(d+a,h,o);this.runtime.setFilterQ(this.index,f)}e.target.blur()}}},(()=>{b.styles=[x,u.css`
      :host {
        display: grid;
        grid-auto-flow: column;
        grid-template-columns: 60px 60px 50px 40px;
        align-items: center;
        gap: 4px;
        background-color: transparent;
        border-radius: 22px;
        transition: background-color 0.15s ease;
      }
      :host(.selected) {
        background-color: #373737;
      }
      input,
      select {
        padding: 0;
        border: 0;
      }
      input {
        border-bottom: 1px solid transparent;
        transition: border-color 0.15s ease;
      }
      input:focus,
      input:active {
        border-color: white;
      }
      .chip {
        display: inline-grid;
        grid-auto-flow: column;
        gap: 3px;
        height: 20px;
        padding-right: 6px;
        border-radius: 10px;
        background: #373737;
        transition: background-color 0.15s ease;
      }
      :host(.selected) .chip .filterNumber {
        background: #ffcc00;
      }
      .chip.disabled:hover {
        background: #444444;
      }
      .filterNumber {
        cursor: pointer;
        width: 20px;
        height: 20px;
        border-radius: 10px;
        display: grid;
        place-content: center;
        background: white;
        font-weight: var(--font-weight);
        color: black;
        transition: background-color 0.15s ease;
      }
      .chip.disabled .filterNumber {
        background: transparent;
        color: white;
      }
      .chip.bypassed .filterNumber {
        background: #7d7d7d;
        color: black;
      }
      .filterTypeSelect {
        width: 30px;
        appearance: none;
        outline: none;
        background-color: transparent;
        color: white;
        cursor: pointer;
        text-align: center;
        font-family: var(--font-stack);
        font-size: var(--font-size);
        font-weight: var(--font-weight);
      }
      .filterTypeSelect.bypassed {
        color: #7d7d7d;
      }
      .chip.disabled .filterTypeSelect {
        pointer-events: all;
      }
      .frequencyInput {
        width: 28px;
      }
      .gainInput {
        width: 26px;
      }
      .qInput {
        width: 30px;
      }
      .numberInput {
        appearance: none;
        outline: none;
        background-color: transparent;
        color: white;
        text-align: right;
        -moz-appearance: textfield;
        font-family: var(--font-stack);
        font-size: var(--font-size);
        font-weight: var(--font-weight);
        touch-action: none;
      }
      .numberInput:disabled,
      .disabled {
        color: #7d7d7d;
        pointer-events: none;
      }
      .bypassed {
        color: #7d7d7d;
      }
      .numberInput::-webkit-inner-spin-button,
      .numberInput::-webkit-outer-spin-button {
        -webkit-appearance: none !important;
        margin: 0 !important;
      }
    `]})(),b);p([c.property({attribute:!1})],y.prototype,"runtime",void 0);p([c.property()],y.prototype,"index",void 0);p([c.state()],y.prototype,"frequencyInputFocused",void 0);p([c.state()],y.prototype,"dragStates",void 0);y=p([c.customElement("weq8-ui-filter-row")],y);var w;exports.WEQ8UIElement=(w=class extends u.LitElement{constructor(){super(),this.gridXs=[],this.dragStates={},this.selectedFilterIdx=-1,this.addEventListener("click",e=>{e.composedPath()[0]===this&&(this.selectedFilterIdx=-1)})}updated(e){var t,s;if(e.has("runtime")&&((t=this.analyser)==null||t.dispose(),(s=this.frequencyResponse)==null||s.dispose(),this.runtime&&this.analyserCanvas&&this.frequencyResponseCanvas)){this.analyser=new q(this.runtime,this.analyserCanvas),this.analyser.analyse(),this.frequencyResponse=new F(this.runtime,this.frequencyResponseCanvas),this.frequencyResponse.render();let i=[],r=this.runtime.audioCtx.sampleRate/2,n=Math.floor(Math.log10(r));for(let a=0;a<n;a++){let h=Math.pow(10,a+1);for(let o=1;o<10;o++){let d=h*o;if(d>r)break;i.push((Math.log10(d)-1)/(Math.log10(r)-1)*100)}}this.gridXs=i,this.runtime.on("filtersChanged",()=>{var a,h,o;(a=this.frequencyResponse)==null||a.render(),this.requestUpdate();for(let d of Array.from((o=(h=this.shadowRoot)==null?void 0:h.querySelectorAll("weq8-ui-filter-row"))!=null?o:[]))d.requestUpdate()})}}render(){var e;return u.html`
      <table class="filters">
        <thead>
          <tr>
            <th class="headerFilter">Filter</th>
            <th>Freq</th>
            <th>Gain</th>
            <th>Q</th>
          </tr>
        </thead>
        <tbody>
          ${Array.from({length:8}).map((t,s)=>u.html`<weq8-ui-filter-row
                class="${g.classMap({selected:this.selectedFilterIdx===s})}"
                .runtime=${this.runtime}
                .index=${s}
                @select=${i=>{var r;this.selectedFilterIdx=((r=this.runtime)==null?void 0:r.spec[s].type)==="noop"?-1:s,i.stopPropagation()}}
              />`)}
        </tbody>
      </table>
      <div class="visualisation">
        <svg
          viewBox="0 0 100 10"
          preserveAspectRatio="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          ${this.gridXs.map(this.renderGridX)}
          ${[12,6,0,-6,-12].map(this.renderGridY)}
        </svg>
        <canvas class="analyser"></canvas>
        <canvas
          class="frequencyResponse"
          @click=${()=>this.selectedFilterIdx=-1}
        ></canvas>
        ${(e=this.runtime)==null?void 0:e.spec.map((t,s)=>t.type==="noop"?void 0:this.renderFilterHandle(t,s))}
      </div>
    `}renderGridX(e){return u.svg`<line
      class="grid-x"
      x1=${e}
      y1="0"
      x2=${e}
      y2="10"
    />`}renderGridY(e){let s=(e+15)/30*10;return u.svg`<line
      class="grid-y"
      x1="0"
      y1=${s}
      x2="100"
      y2=${s}
    />`}renderFilterHandle(e,t){var h,o,d,f;if(!this.runtime)return;let s=this.runtime.spec[t].type,i=(o=(h=this.analyserCanvas)==null?void 0:h.offsetWidth)!=null?o:0,r=(f=(d=this.analyserCanvas)==null?void 0:d.offsetHeight)!=null?f:0,n=l.toLog10(e.frequency,10,this.runtime.audioCtx.sampleRate/2)*i,a=r-(e.gain+15)/30*r;return l.filterHasGain(s)||(a=r-l.toLog10(e.Q,.1,18)*r),u.html`<div
      class="filter-handle-positioner"
      style="transform: translate(${n}px,${a}px)"
      @pointerdown=${v=>this.startDraggingFilterHandle(v,t)}
      @pointerup=${v=>this.stopDraggingFilterHandle(v,t)}
      @pointermove=${v=>this.dragFilterHandle(v,t)}
    >
      <div
        class="${g.classMap({"filter-handle":!0,bypassed:e.bypass,selected:t===this.selectedFilterIdx})}"
      >
        ${t+1}
      </div>
    </div>`}startDraggingFilterHandle(e,t){e.target.setPointerCapture(e.pointerId),this.dragStates={...this.dragStates,[t]:e.pointerId},this.selectedFilterIdx=t,e.preventDefault()}stopDraggingFilterHandle(e,t){this.dragStates[t]===e.pointerId&&(e.target.releasePointerCapture(e.pointerId),this.dragStates={...this.dragStates,[t]:null})}dragFilterHandle(e,t){var s,i;if(this.runtime&&this.dragStates[t]===e.pointerId){let r=this.runtime.spec[t].type,n=(i=(s=this.frequencyResponseCanvas)==null?void 0:s.getBoundingClientRect())!=null?i:{left:0,top:0,width:0,height:0},a=e.clientX-n.left,h=e.clientY-n.top,o=l.toLin(a/n.width,10,this.runtime.audioCtx.sampleRate/2);this.runtime.setFilterFrequency(t,o);let d=1-h/n.height;if(l.filterHasGain(r)){let f=l.clamp(d*30-15,-15,15);this.runtime.setFilterGain(t,f)}else{let f=l.toLin(d,.1,18);this.runtime.setFilterQ(t,f)}}}},(()=>{w.styles=[x,u.css`
      :host {
        display: flex;
        flex-direction: row;
        align-items: stretch;
        gap: 10px;
        min-width: 600px;
        min-height: 200px;
        padding: 20px;
        border-radius: 8px;
        overflow: hidden;
        background: #202020;
        border: 1px solid #373737;
      }
      .filters {
        display: inline-grid;
        grid-auto-flow: row;
        gap: 4px;
      }
      .filters tbody,
      .filters tr {
        display: contents;
      }
      .filters thead {
        display: grid;
        grid-auto-flow: column;
        grid-template-columns: 60px 60px 50px 40px;
        align-items: center;
        gap: 4px;
      }
      .filters thead th {
        display: grid;
        place-content: center;
        height: 20px;
        border-radius: 10px;
        font-weight: var(--font-weight);
        border: 1px solid #373737;
      }
      .filters thead th.headerFilter {
        text-align: left;
        padding-left: 18px;
        border: none;
      }
      .visualisation {
        flex: 1;
        position: relative;
        border: 1px solid #373737;
      }
      canvas,
      svg {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
      }
      svg {
        overflow: visible;
      }
      .grid-x,
      .grid-y {
        stroke: #333;
        stroke-width: 1;
        vector-effect: non-scaling-stroke;
      }
      .filter-handle-positioner {
        position: absolute;
        top: 0;
        left: 0;
        width: 30px;
        height: 30px;
        touch-action: none;
      }
      .filter-handle {
        position: absolute;
        top: 0;
        left: 0;
        width: 20px;
        height: 20px;
        border-radius: 50%;
        background-color: #fff;
        color: black;
        transform: translate(-50%, -50%);
        display: flex;
        justify-content: center;
        align-items: center;
        user-select: none;
        cursor: grab;
        transition: background-color 0.15s ease;
      }
      .filter-handle.selected {
        background: #ffcc00;
      }
      .filter-handle.bypassed {
        background: #7d7d7d;
      }
    `]})(),w);p([c.property({attribute:!1})],exports.WEQ8UIElement.prototype,"runtime",void 0);p([c.state()],exports.WEQ8UIElement.prototype,"analyser",void 0);p([c.state()],exports.WEQ8UIElement.prototype,"frequencyResponse",void 0);p([c.state()],exports.WEQ8UIElement.prototype,"gridXs",void 0);p([c.state()],exports.WEQ8UIElement.prototype,"dragStates",void 0);p([c.state()],exports.WEQ8UIElement.prototype,"selectedFilterIdx",void 0);p([c.query(".analyser")],exports.WEQ8UIElement.prototype,"analyserCanvas",void 0);p([c.query(".frequencyResponse")],exports.WEQ8UIElement.prototype,"frequencyResponseCanvas",void 0);exports.WEQ8UIElement=p([c.customElement("weq8-ui")],exports.WEQ8UIElement);
